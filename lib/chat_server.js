// Generated by CoffeeScript 1.6.3
(function() {
  var assignGuestName, currentRoom, guestNumber, handleNameChangeAttempts, joinRoom, namesUsed, nickNames, socketio;

  socketio = require('socket.io');

  io;

  guestNumber = 1;

  nickNames = {};

  namesUsed = {};

  currentRoom = {};

  exports.listen = function(server) {
    var io;
    io = socketio.listen(server);
    io.set('log level', 1);
    return io.sockets.on('connection', function(socket) {
      guestNumber = assignGuestName(socket, guestNumber, nickNames, namesUsed);
      joinRoom(socket, 'Lobby');
      handleMessageBroadcasting(socket, nickNames);
      handleNameChangeAttempts(socket, nickNames, namesUsed);
      handleRoomJoining(socket);
      socket.on('rooms', function() {
        return socket.emit('rooms', io.sockets.manager.rooms);
      });
      return handleClientDisconnection(socket, nickNames, namesUsed);
    });
  };

  assignGuestName = function(socket, guestNumber, nickNames, namesUsed) {
    var name;
    name = 'Guest' + guestNumber;
    nickNames[socket.id] = name;
    socket.emit('nameResult', {
      success: true,
      name: name
    });
    namesUsed.push(name);
    return guestNumber + 1;
  };

  joinRoom = function(socket, room) {
    var index, userSocketId, usersInRoom, usersInRoomSummary;
    socket.join(room);
    currentRoom[socket.id] = room;
    socket.emit('joinResult', {
      room: room
    });
    socket.broadcast.to(room).emit('message', {
      text: nickNames[socket.id] + ' has joined ' + room + '.'
    });
    usersInRoom = io.sockets.clients(room);
    if (usersInRoom.length > 1) {
      usersInRoomSummary = 'Users currently in ' + room + ': ';
      for (index in usersInRoom) {
        userSocketId = usersInRoom[index].id;
        if (userSocketId !== socket.id) {
          if (index > 0) {
            usersInRoomSummary += ', ';
          }
          usersInRoomSummary += nickNames[userSocketId];
        }
      }
      usersInRoomSummary += '.';
      return socket.emit('message', {
        text: usersInRoomSummary
      });
    }
  };

  handleNameChangeAttempts = function(socket, nickNames, namesUsed) {
    return socket.on('nameAttempt', function(name) {
      var previousName, previousNameIndex;
      if (name.indexOf('Guest') === 0) {
        socket.emit('nameResult', {
          success: false,
          message: 'Names cannot begin with "Guest".'
        });
      } else {

      }
      if (namesUsed.indexOf(name) === -1) {
        previousName = nickNames[socket.id];
        previousNameIndex = namesUsed.indexOf(previousName);
        namesUsed.push(name);
        nickNames[socket.id] = name;
        delete namesUsed[previousNamesIndex];
        socket.emit('nameResult', {
          success: true,
          name: name
        });
        return socket.broadcase.to(currentRoom[socket.id]).emit('message', {
          text: previousName + ' is now known as ' + name + '.'
        });
      } else {
        return socket.emit('nameResult', {
          success: false,
          message: 'The name is arleady in use.'
        });
      }
    });
  };

}).call(this);
